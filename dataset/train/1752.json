{
    "score": [
        0.4166666666666667
    ],
    "extracted": [
        2
    ],
    "abstract": [
        "a modern look into technical debt with a lean startup mindset ."
    ],
    "id": "738568.train",
    "article": [
        "every development team has suffered with technical debt , and most developers love refactoring these issues into the early hours , like an accountant making sure the books balance on the eve of christmas . sometimes though , we focus too much on the technical debt than key business metrics , or sometimes we focus too much on features and not enough on software architecture which bites us later in development . when thousands are trying to build startups and move incredibly fast , how do you balance acquiring technical debt and feature delivery . simple , stop seeing it as debt . ",
        "what did we learn from the lean startup ? what i am going to propose goes hand-in-hand with eric ries ' the lean startup . key takeaways from lean startup , for me , were to validate your ideas . develop as if you were running an experiment , have a clear hypothesis and measure to see if your assertions were correct . in 2018 , developers should be used to developing with uncertainty like this ; shipping code and measuring if the changes are having any impact on key metrics . there are number of methods that allow teams to release code and to accurately measure the outcomes like a/b testing . ",
        "by releasing code and measuring the impact , the team are aware of what changes/features have value to their customer , then you repeat this cycle to continue building a successful product . this build-measure-learn cycle is key to fast and scientific development . by building features in this fashion , developers will know where to spend the time and effort as the results will be clear through experiment outcomes . technical debt 101technical debt is a concept in software development that reflects the implied cost of additional rework caused by choosing an easy solution now instead of using a better approach that would take longer . ",
        "technical debt is like a loan -- having to pay off interest . and sometimes its too much and you stop enjoying life ... or development . not good . clear examples of tech debt could be : adding hard coded values to a service or frontend when the values could be in configuration . not extracting constants in files when they are used throughout several files . a class could be executing too much code , breaking single responsibility principle . not creating automated tests , or not updating automated tests . you may ask why the above examples are bad ... when someone comes across code like this , they may take longer to understand what is going on , or they may have to add further tests or take longer testing manually . ",
        "or the developer wo n't understand , needing assistance to make the change , or even have to do a complete rewrite . changes like these have to be tracked and dealt with at some point because otherwise development velocity will begin to dramatically decrease . so why not `` try before you buy '' ? technical debt is assumes that there will be rework at some point , and that the shortcuts taken will slow down development further down the line . and of course , no one wants to take on debt -- within software development it 's a often frowned upon . ",
        "however , what if as part of the lean mindset we stop seeing code changes mentioned above as technical debt ? what if we made these `` technical debt '' changes inline with our hypothesis ? what if we said we will develop the code in such a way , that when our hypothesis is proven true we rebuild them from the ground up ? we fully invest . buy the feature out right ! ! and if our hypothesis is proven wrong , we remove them ! say ` no thank you ' to the purchase that does business no good . ",
        "i call it this mindset : try before you buy . you are not acquiring technical debt you are simply seeing if the feature you are building is worth it ! if the features moves your business or key metrics positively then we simply acknowledge this and fully invest in the feature . we then write the code properly , how it should have been written in the first place had you known the code would stick around . again , if the hypothesis is proven false , removing the code means no debt has been accrued . fusing this lean startup mentality to the idea of technical debt allows for rapid development as the development team can focus on key metrics initially over clean code . ",
        "do n't get me wrong , if the hypothesis is correct , clean code will follow swiftly but you have evidence that the engineer team is working on worthwhile features that have clear business value that no one will want to regress . example : gift cards by goroadieat goroadie , we have taken this mentality on with our development of every new feature . we build features with key business metrics in mind . we then develop them quickly , without automatic or unit tests , and release the feature . normally from design inception to release for major features it is about 12 -- 15 hours . ",
        "we built an entire gift card system for the 2017 holiday season , allowing friends and family to buy driving lesson gift cards . we started by designing the feature on a whiteboard and within three hours , we had started building the our gift card system . by 15 hours , we had built the feature , thoroughly tested the feature , styled , deployed to our production environment and launched a marketing campaign live . this is rapid development . the results ? before we launched we had agreed a clear definition of success of what we needed to achieve within a month , which we met . ",
        "this meant our hypothesis had been proven right , people would buy driving lesson gift cards . what does that mean for the code we had written ? it meant we went back , refactored any shortcuts in the code around gift cards and surrounded it with automatic tests -- to ensure this valuable feature does not break . sounds easy , but how ? so , the concept is simple and the challenge lies with teams being able to follow the process strictly , because the risk is that you end up with technical debt and untested code . ",
        "i should stress this mentality should be for mature lean/agile teams . method # 1when the feature is out in the wild and the verdict is still out on the team 's hypothesis , keep the user story in a non-done state . either `` uat '' or a `` measure '' column on your sprint board . this is a solid mechanism to track live experiments . when the verdict comes in , you can either : update the ticket with `` remove code , failed experiment '' and move to the top of up next/backlog/not started . the next free developer works on removing the redundant code changes . ",
        "or , create another task `` gift cards refactor `` , explaining the business value is around the previous experiment . also move this to the top of up next/backlog/not started . method # 2once the feature is proven to be successful , remove it . it forces the team to build the feature properly and ensures there is no technical debt . there is a clear purpose to building the feature now that it has been validated , and the team have the data to back this up . it is now worth spending the time to build the feature with the correct infrastructure . ",
        "again , if the feature has proven to not fulfil the definition of success , delete that code immediately -- otherwise you have taken on technical debt . we are sure there are other methods , but we have alternated between method 1 and 2 , depending on which was right at the time . summarythe entire idea of try before you buy is simple ; build quickly - > measure - > learn and refactor . this prevents engineers from over engineering on features that have little worthwhile , and means the code that lives within your product is validated -- it has value . ",
        "we have been using this mentality for over a year and without it we could not move as quickly as we do . and as a startup , we can not afford to not move this fast . lean startup , build , measure , learn .   "
    ]
}