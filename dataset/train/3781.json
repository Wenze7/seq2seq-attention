{
    "score": [
        0.8571428571428571
    ],
    "extracted": [
        5
    ],
    "abstract": [
        "how to plan a microservice implementation ."
    ],
    "id": "31664.train",
    "article": [
        "ask what amazon 's greatest accomplishment has been to date , and you 'll probably hear about how they 've revolutionized online shopping , or become a credible player in media and entertainment . if you speak with a technologist , they might mention amazon 's emergence as one of the preeminent technology platforms . while there 's nothing new or exciting about companies using amazon web services as a platform , consider for a moment what would happen if you travelled back in time and told your previous self that you 'd soon come to rely on amazon as a critical infrastructure partner . ",
        "public information seems to indicate that amazon did n't really set out to become a major cloud player , and early versions of its platform were ultimately built for internal consumption . in the early 2000s , amazon set a conceptually simple , but far-ranging policy that all company it projects needed to provide a standardized interface that separated the service from the underlying technology since it 's it stack had grown into what the company described as a huge `` monolith '' that was becoming nearly impossible to maintain . rather than building custom interfaces to an order tracking system that would need to be changed should the underlying order tracking software be updated or changed , the group that maintained the order tracking system would publish a set of standard apis that would document how other applications could ask for and receive order tracking data . ",
        "these interfaces were essentially standards , and could not be modified without appropriate communication to users , as well as a defined timeline for any changes to existing interfaces . furthermore , these standardized interfaces would be designed to accomplish a single , discrete task , hence the `` micro '' in microservice . in traditional systems design , you might pass data to another application that then performs dozens of operations on that data , effectively hiding what occurred from someone else who might wish to use the service . the magic of microserviceswhat amazon quickly realized was that with all of its systems providing simple , common , and stable microservices , other parts of the company , and ultimately the public at large , could use these services to create something new , and the products built with amazon 's internal technology were freed from the vagaries of version upgrades , system changes , and code updates , since they could always depend on a service producing a consistent result , irrespective of the technology used to provide that result . ",
        "how to get started with microservicesfor a few organizations , it may be possible to duplicate amazon 's move and essentially mandate all new software projects be delivered through microservices . for the rest of us , it may be easier to start more simply . probably the best place to start simply is when acquiring new software or platforms . this is generally simple when buying cloud software as a service , as providers deliver a suite of pre-built microservices to interact with the data and business logic . identify some simple use cases that show the benefit of microservices . ",
        "for example , if you implement a cloud-based sales platform , you might leverage microservices to capture data on your website and feed it into the sales system . or , you might quickly develop a mobile or web-based app in record time that performs a specific , meaningful task and demonstrates that microservices make it faster and more flexible . when hunting for areas to build such a test case , look for tech-savvy business users who are buried under spreadsheets , macros , and access databases trying to essentially marry information from various services in your company . ",
        "while this might seem like it 's creating more work for it , ultimately it should maintain and secure the microservice , while users create applications of that service . how to avoid potential pitfallsat a superficial level , it 's easy to convey the benefits of microservices . however , as you start to plan a transition to microservices the proposition can become daunting . even small organizations have hundreds or thousands of application components that could be made available via a microservice . identify key it services that power multiple applications and prioritize them for microservices . a shipping company might start by building order status microservices , just as a retailer might start with inventory services . ",
        "it may also be tempting to create the perfect microservice for each application , that accommodates every potential scenario and permutation . this approach is a recipe for delayed rollouts and overcomplication . seek to keep the `` micro '' in microservices by making each perform a discrete task . you can always augment multiple services to perform more complex functions , just as you can expand functionality in future versions . for each service , publish a set of specifications that is maintained on an ongoing basis . a comprehensive library of microservices that are not shared or well-documented accomplishes little . ",
        "remember that a key benefit of microservices is that new applications can be built without complex it projects and approvals , so keeping your services updated and documented is critical for getting the benefit of these services . allow for ownership of microservices . there may also be some resistance by owners of the various services that will ultimately be made available via a microservice architecture . with open services , individual teams give up some of their `` gatekeeper '' role , which can seem threatening . ensure that you communicate that their span of control remains intact by preserving the integrity of what happens behind the microservice , and that the broader organization can rapidly benefit from their work rather than having to wait for complex , one-off interfaces . ",
        "also see : why microservices may not be for everybody 8 ways to make sure you really need microservices 8 speed bumps that may slow down the microservices and container express10 tips for securing microservice architecture experts explain why microservices are overhyped image : istock/champja .   "
    ]
}