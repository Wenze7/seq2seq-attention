{
    "score": [
        0.625
    ],
    "extracted": [
        7
    ],
    "abstract": [
        "why people should n't learn to code ."
    ],
    "id": "667432.train",
    "article": [
        "as a scholar , i like arguing against myself . thesis , anti-thesis , synthesis : the hegelian dialectic can be one of the more productive and entertaining paths to truth . and so , in this post , i attack the central thesis of my research : that the ability to program a computer , and the computational thinking that can come with it , is a power that must be democratized . why do i believe this ? i believe that a severe concentration of power nearly always leads to injustice , and justice is one of my core values . ",
        "that only 20 million people write the software that shapes the digital experiences of the 7.5 billion people on earth is concentration of power second only to global income inequality . my research aims to lower the barriers to acquiring the power to code , which i hope will more evenly distribute this power , which in turn will reduce injustice . agree with me ? great ! but that 's no fun . and it leaves this position open to attack , with no sense of how robust it actually is . my position might even be wrong . ",
        "so let 's consider three anti-theses to my thesis . ability is an arms raceone critique of my thesis is that the ability to code is an arms race . no matter how easy we make it to learn to code , this greater ease will only amplify the abilities of those who already could . the privileged few who learn to code now will learn younger and faster . all of those talented new engineers that did n't have jobs before still wo n't get jobs at google because everyone else will be that much more talented . no matter what we do , power will remain concentrated , because the underlying social structures that protect that power will remain unchanged . ",
        "this is an instance of kentaro toyama 's argument about technology as an amplifier rather than a catalyst of social change . the argument is that technology of any kind , whether a learning technology , a better pedagogy , a simpler programming language , or a better developer tool , will only intensify whatever social structures exist . it 's up to us to change our behavior , our values , and ultimately , our institutions , if we want to redistribute power . more effective learning will not . software is evilanother critique of my thesis is that the software itself is a net loss for humanity . ",
        "communication technologies have eroded our relationships , democratization of publishing has eroded truth , platforms have eroded innovation , and automation has eroded our livelihood . there may be some good things that come from digitizing information and automating decisions , but on the whole , they take more than they give . we should therefore have less software , not more , and so we should have fewer people that can code , not more . like nuclear weapons , we should use software sparingly , if it all . this argument abounds in pop culture of today . ",
        "as all dystopian sci-fi has for a century , black mirror is popularizing this position , portraying how even small changes in how we use software can lead to plausible and horrifying outcomes . software is dangerousone of the critiques i 've heard most is the idea that software is too powerful to be democratized . as in medicine , engineering , and law , some knowledge should be regulated , only accessible to people with appropriate training . the risk of allowing everyone have the ability to code is harm . and perhaps were already seeing the result of unregulated access to the ability to code : software fails , people die . ",
        "in fact , i analyzed 30 years of software failures reported in the news , finding that about once per month , the news reports at least one death , injury , or threatened access to food or shelter due to software problems . is all of this faulty software really worth this increasingly frequent harm ? some countries such as canada do regulate software engineering . these efforts are often poorly implemented and premature , but not necessarily wrong in principle . we do n't want a billion people to know a little bit about heart surgery . why would we want a billion people to know a little bit about software development ? ",
        "credit : cc0 creative commonsnow , to synthesis . how can we reconcile these conflicting stances ? all four of these arguments have a kernel of truth . the small number of developers in the world really do concentrate power , and that does lead to injustice like algorithmic bias , poor software accessibility for people with disabilities , and innovations that primarily serve the privileged classes that created them . and yet , software does cause harm and can be evil . it 's entirely possible that by helping more people learn to code , we 'll just end up with more people with brittle knowledge of how to create software , more bad software , and the same people in power . ",
        "the fatal flaw that puts these positions in conflict is that none of them make explicit who will learn to code and what they will do with that knowledge . i envision a world in which a vast majority of educated people understand enough about code not to become engineers , but to advocate for justice . some of those people will become software engineers , but they will be different , more diverse people , who represent society , unlike the engineers we have now . this larger group wo n't make any more software than we would have made otherwise . ",
        "rather , this new majority of computationally literate citizens will be a political force that demands justice . this literacy could not be more pressing . for the next century , we will be heavily debating net neutrality , privacy , the regulation of automation . we will be trying to parent in the presence of social media . we will be trying to make objective journalism sustainable and desirable . we need every parent , politician , and person in power to understand what code is and what it is n't . and we need the 20 plus million developers in the world to reflect everyone , so the software they create serves everyone . ",
        "the other fatal flaw in all of the positions above is that they do n't make clear what `` learning to code '' means . what does everyone need to understand about software to be in a position to advocate objectively ? it 's not necessarily knowing a programming language . it might mean knowing what programming languages are and are not capable of . it might mean understanding the intersection between computing and policy . it might mean understanding how software engineered and who engineers it , so everyone can comprehend what any particular policy proposal they 're voting on would actually mean in practice . ",
        "some of these ideas have made it into our curricular standards and assessments , but most have not . we need to understand what this knowledge is and invent ways of teaching it effectively . software is not going away . it will continue to be evil and dangerous . it will continue to bring joy and prosperity . but it will not bring social change , and it will not provide universal access to knowledge about computing . that 's up to us .   "
    ]
}